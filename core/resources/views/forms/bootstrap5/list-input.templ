package bootstrap5

import (
	"fmt"

	"sdk/api/http"
	"sdk/api/forms"

	"github.com/flarehotspot/go-utils/slices"
	"reflect"
)

templ ListInputField(form sdkhttp.IHttpForm, sec sdkforms.FormSection, fld sdkforms.IFormField) {
	{{ lf, ok := fld.(sdkforms.ListField) }}
	if ok {
		@listOptionFields(form, sec, lf)
	} else {
		<span>{ fmt.Sprintf("list field %s in section %s is not a list field", fld.GetName(), sec.Name) }</span>
	}
}

templ listOptionFields(form sdkhttp.IHttpForm, sec sdkforms.FormSection, lf sdkforms.ListField) {
	<legend>{ lf.Label }</legend>
	{{
	var optType string
	if lf.Multiple {
		optType = "checkbox"
	} else {
		optType = "radio"
	}
	}}
	for _, opt := range lf.Options() {
		<div class="form-check">
			<input
				class="form-check-input"
				type={ optType }
				name={ fmt.Sprintf("%s:%s", sec.Name, lf.Name) }
				value={ parseListOptValue(lf, opt) }
				checked?={ isListOptSelected(form, sec, lf, opt) }
			/>
			<label class="form-check-label">
				{ opt.Label }
			</label>
		</div>
	}
}

func isListOptSelected(form sdkhttp.IHttpForm, sec sdkforms.FormSection, lf sdkforms.ListField, opt sdkforms.ListOption) bool {
	switch lf.Type {
	case sdkforms.FormFieldTypeText:
		v, ok := opt.Value.(string)
		if !ok {
			return false
		}

		if lf.Multiple {
			vals, err := form.GetStringValues(sec.Name, lf.Name)
			if err != nil {
				return false
			}
			return sdkslices.Contains(vals, v)
		} else {
			val, err := form.GetStringValue(sec.Name, lf.Name)
			if err != nil {
				return false
			}
			return val == v
		}
	case sdkforms.FormFieldTypeNumber:
		var v float64
		k := reflect.TypeOf(opt.Value).Kind()

		switch k {
		case reflect.Int:
			v = float64(opt.Value.(int))
		case reflect.Int32:
			v = float64(opt.Value.(int32))
		case reflect.Float32:
			v = float64(opt.Value.(float32))
		case reflect.Float64:
			v = opt.Value.(float64)
		}

		if lf.Multiple {
			vals, err := form.GetFloatValues(sec.Name, lf.Name)
			if err != nil {
				return false
			}
			return sdkslices.Contains(vals, v)
		} else {
			val, err := form.GetFloatValue(sec.Name, lf.Name)
			if err != nil {
				return false
			}
			return val == v
		}
	}
	return false
}
func parseListOptValue(lf sdkforms.ListField, opt sdkforms.ListOption) (val string) {
	switch lf.Type {
	case sdkforms.FormFieldTypeText:
		v, ok := opt.Value.(string)
		if !ok {
			return ""
		}
		return v
	case sdkforms.FormFieldTypeNumber:
		t := reflect.TypeOf(opt.Value)
		switch t.Kind() {
		case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32:
			return fmt.Sprintf("%.2f", float64(opt.Value.(int)))
		case reflect.Float32, reflect.Float64:
			return fmt.Sprintf("%.2f", opt.Value)
		}

		return "0"
	}
	return
}
func getListInputField(fld sdkforms.IFormField) (lf sdkforms.ListField) {
	lf, _ = fld.(sdkforms.ListField)
	return lf
}
func getListFieldInputType(fld sdkforms.IFormField) string {
	listField, ok := fld.(sdkforms.ListField)
	if !ok {
		return "not a list field"
	}
	return listField.Type
}
