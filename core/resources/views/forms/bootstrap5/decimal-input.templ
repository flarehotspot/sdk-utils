package bootstrap5

import (
	"fmt"
    sdkapi "sdk/api"
)

type DecimalInputFieldAttrs struct {
	Label string
	Name  string
	Value string
	Step  string
	Error error
}

templ DecimalInputField(form sdkapi.IHttpForm, sec sdkapi.FormSection, fld sdkapi.IFormField) {
	{{ attrs := getDecimalInputFieldAttrs(form, sec, fld) }}
	<label for={ attrs.Name } class="form-label">{ attrs.Label }</label>
	<input type="number" step={ attrs.Step } class="form-control" id={ attrs.Name } name={ attrs.Name } value={ attrs.Value }/>
	if attrs.Error != nil {
		<div class="invalid-feedback">{ attrs.Error.Error() }</div>
	}
}

func getDecimalInputFieldAttrs(form sdkapi.IHttpForm, sec sdkapi.FormSection, fld sdkapi.IFormField) (attrs DecimalInputFieldAttrs) {
	attrs.Label = fld.GetLabel()
	attrs.Name = fmt.Sprintf("%s:%s", sec.Name, fld.GetName())
	var val float64
	val, attrs.Error = form.GetFloatValue(sec.Name, fld.GetName())
	if attrs.Error != nil {
		return
	}
	numfield, ok := fld.(sdkapi.FormDecimalField)
	if !ok {
		attrs.Error = fmt.Errorf("Field %s in section %s is not a number field", fld.GetName(), sec.Name)
		return
	}
	if numfield.Step == 0.0 {
		attrs.Step = "1"
	} else {
		attrs.Step = fmt.Sprintf("%f", numfield.Step)
	}
	format := fmt.Sprintf("%%.%df", numfield.Precision)
	attrs.Value = fmt.Sprintf(format, val)
	return
}
