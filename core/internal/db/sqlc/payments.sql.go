// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: payments.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPayment = `-- name: CreatePayment :one
INSERT INTO payments (purchase_id, amount, optname) 
VALUES 
  ($1, $2, $3) RETURNING id
`

type CreatePaymentParams struct {
	PurchaseID pgtype.UUID
	Amount     pgtype.Numeric
	Optname    string
}

func (q *Queries) CreatePayment(ctx context.Context, arg CreatePaymentParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, createPayment, arg.PurchaseID, arg.Amount, arg.Optname)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}

const findAllPaymentsByPurchaseId = `-- name: FindAllPaymentsByPurchaseId :many
SELECT 
  id, 
  purchase_id, 
  amount, 
  optname, 
  created_at 
FROM 
  payments 
WHERE 
  purchase_id = $1
`

func (q *Queries) FindAllPaymentsByPurchaseId(ctx context.Context, purchaseID pgtype.UUID) ([]Payment, error) {
	rows, err := q.db.Query(ctx, findAllPaymentsByPurchaseId, purchaseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Payment
	for rows.Next() {
		var i Payment
		if err := rows.Scan(
			&i.ID,
			&i.PurchaseID,
			&i.Amount,
			&i.Optname,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findPayment = `-- name: FindPayment :one
SELECT 
  id, 
  purchase_id, 
  amount, 
  optname, 
  created_at 
FROM 
  payments 
WHERE 
  id = $1 
LIMIT 
  1
`

func (q *Queries) FindPayment(ctx context.Context, id pgtype.UUID) (Payment, error) {
	row := q.db.QueryRow(ctx, findPayment, id)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.PurchaseID,
		&i.Amount,
		&i.Optname,
		&i.CreatedAt,
	)
	return i, err
}

const updatePayment = `-- name: UpdatePayment :exec
UPDATE 
  payments 
SET 
  amount = $1 
WHERE 
  id = $2
`

type UpdatePaymentParams struct {
	Amount pgtype.Numeric
	ID     pgtype.UUID
}

func (q *Queries) UpdatePayment(ctx context.Context, arg UpdatePaymentParams) error {
	_, err := q.db.Exec(ctx, updatePayment, arg.Amount, arg.ID)
	return err
}
