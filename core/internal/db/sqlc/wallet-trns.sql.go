// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: wallet-trns.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createWalletTrns = `-- name: CreateWalletTrns :one
INSERT INTO wallet_transactions (
  wallet_id, amount, new_balance, description
) 
VALUES 
  ($1, $2, $3, $4)
RETURNING id, wallet_id, amount, new_balance, description, created_at
`

type CreateWalletTrnsParams struct {
	WalletID    pgtype.UUID
	Amount      pgtype.Numeric
	NewBalance  pgtype.Numeric
	Description pgtype.Text
}

func (q *Queries) CreateWalletTrns(ctx context.Context, arg CreateWalletTrnsParams) (WalletTransaction, error) {
	row := q.db.QueryRow(ctx, createWalletTrns,
		arg.WalletID,
		arg.Amount,
		arg.NewBalance,
		arg.Description,
	)
	var i WalletTransaction
	err := row.Scan(
		&i.ID,
		&i.WalletID,
		&i.Amount,
		&i.NewBalance,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const findWalletTrns = `-- name: FindWalletTrns :one
SELECT 
  id, 
  wallet_id, 
  amount, 
  new_balance, 
  description, 
  created_at 
FROM 
  wallet_transactions 
WHERE 
  id = $1 
LIMIT 
  1
`

func (q *Queries) FindWalletTrns(ctx context.Context, id pgtype.UUID) (WalletTransaction, error) {
	row := q.db.QueryRow(ctx, findWalletTrns, id)
	var i WalletTransaction
	err := row.Scan(
		&i.ID,
		&i.WalletID,
		&i.Amount,
		&i.NewBalance,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const updateWalletTrns = `-- name: UpdateWalletTrns :exec
UPDATE
  wallet_transactions 
SET 
  wallet_id = $1,
  amount = $2,
  new_balance = $3,
  description = $4 
WHERE 
  id = $5
`

type UpdateWalletTrnsParams struct {
	WalletID    pgtype.UUID
	Amount      pgtype.Numeric
	NewBalance  pgtype.Numeric
	Description pgtype.Text
	ID          pgtype.UUID
}

func (q *Queries) UpdateWalletTrns(ctx context.Context, arg UpdateWalletTrnsParams) error {
	_, err := q.db.Exec(ctx, updateWalletTrns,
		arg.WalletID,
		arg.Amount,
		arg.NewBalance,
		arg.Description,
		arg.ID,
	)
	return err
}
