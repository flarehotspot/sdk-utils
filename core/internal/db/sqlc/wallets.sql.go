// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: wallets.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createWallet = `-- name: CreateWallet :one
INSERT INTO wallets (device_id, balance) 
VALUES 
  ($1, $2) RETURNING id
`

type CreateWalletParams struct {
	DeviceID pgtype.UUID
	Balance  pgtype.Numeric
}

func (q *Queries) CreateWallet(ctx context.Context, arg CreateWalletParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, createWallet, arg.DeviceID, arg.Balance)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}

const findWallet = `-- name: FindWallet :one
SELECT 
  id, 
  device_id, 
  balance, 
  created_at 
FROM 
  wallets 
WHERE 
  id = $1 
LIMIT 
  1
`

func (q *Queries) FindWallet(ctx context.Context, id pgtype.UUID) (Wallet, error) {
	row := q.db.QueryRow(ctx, findWallet, id)
	var i Wallet
	err := row.Scan(
		&i.ID,
		&i.DeviceID,
		&i.Balance,
		&i.CreatedAt,
	)
	return i, err
}

const findWalletByDeviceId = `-- name: FindWalletByDeviceId :one
SELECT 
  id, 
  device_id, 
  balance, 
  created_at 
FROM 
  wallets 
WHERE 
  device_id = $1 
LIMIT 
  1
`

func (q *Queries) FindWalletByDeviceId(ctx context.Context, deviceID pgtype.UUID) (Wallet, error) {
	row := q.db.QueryRow(ctx, findWalletByDeviceId, deviceID)
	var i Wallet
	err := row.Scan(
		&i.ID,
		&i.DeviceID,
		&i.Balance,
		&i.CreatedAt,
	)
	return i, err
}

const updateWallet = `-- name: UpdateWallet :exec
UPDATE 
  wallets 
SET 
  balance = $1 
WHERE 
  id = $2
`

type UpdateWalletParams struct {
	Balance pgtype.Numeric
	ID      pgtype.UUID
}

func (q *Queries) UpdateWallet(ctx context.Context, arg UpdateWalletParams) error {
	_, err := q.db.Exec(ctx, updateWallet, arg.Balance, arg.ID)
	return err
}
