// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: devices.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createDevice = `-- name: CreateDevice :one
INSERT INTO devices (
  mac_address, ip_address, hostname
) 
VALUES 
  (
    $1, 
    $2, 
    $3
  ) RETURNING id
`

type CreateDeviceParams struct {
	MacAddress string
	IpAddress  string
	Hostname   pgtype.Text
}

func (q *Queries) CreateDevice(ctx context.Context, arg CreateDeviceParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, createDevice, arg.MacAddress, arg.IpAddress, arg.Hostname)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}

const findDevice = `-- name: FindDevice :one
SELECT 
  id, 
  mac_address, 
  ip_address, 
  hostname, 
  created_at 
FROM 
  devices 
WHERE 
  id = $1 
LIMIT 
  1
`

type FindDeviceRow struct {
	ID         pgtype.UUID
	MacAddress string
	IpAddress  string
	Hostname   pgtype.Text
	CreatedAt  pgtype.Timestamp
}

func (q *Queries) FindDevice(ctx context.Context, id pgtype.UUID) (FindDeviceRow, error) {
	row := q.db.QueryRow(ctx, findDevice, id)
	var i FindDeviceRow
	err := row.Scan(
		&i.ID,
		&i.MacAddress,
		&i.IpAddress,
		&i.Hostname,
		&i.CreatedAt,
	)
	return i, err
}

const findDeviceByMac = `-- name: FindDeviceByMac :one
SELECT 
  id, 
  hostname, 
  ip_address, 
  mac_address, 
  created_at 
FROM 
  devices 
WHERE 
  mac_address = $1
LIMIT 
  1
`

type FindDeviceByMacRow struct {
	ID         pgtype.UUID
	Hostname   pgtype.Text
	IpAddress  string
	MacAddress string
	CreatedAt  pgtype.Timestamp
}

func (q *Queries) FindDeviceByMac(ctx context.Context, macAddress string) (FindDeviceByMacRow, error) {
	row := q.db.QueryRow(ctx, findDeviceByMac, macAddress)
	var i FindDeviceByMacRow
	err := row.Scan(
		&i.ID,
		&i.Hostname,
		&i.IpAddress,
		&i.MacAddress,
		&i.CreatedAt,
	)
	return i, err
}

const updateDevice = `-- name: UpdateDevice :exec
UPDATE 
  devices 
SET 
  hostname = $1, 
  ip_address = $2, 
  mac_address = $3 
WHERE 
  id = $4
`

type UpdateDeviceParams struct {
	Hostname   pgtype.Text
	IpAddress  string
	MacAddress string
	ID         pgtype.UUID
}

func (q *Queries) UpdateDevice(ctx context.Context, arg UpdateDeviceParams) error {
	_, err := q.db.Exec(ctx, updateDevice,
		arg.Hostname,
		arg.IpAddress,
		arg.MacAddress,
		arg.ID,
	)
	return err
}
