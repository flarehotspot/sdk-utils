---
name: release-devkit

on:
  push:
    branches: [releases]

env:
  CGO_ENABLED: '1'
  GITHUB_TOKEN: ${{ secrets.DEVKIT_RELEASE_SECRET }}

jobs:
  build-amd64:
    runs-on: ${{ matrix.distro }}
    name: Build devkit on ${{ matrix.goarch }}
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            distro: self-hosted-x64
            cc: gcc
    env:
      GOARCH: ${{ matrix.goarch }}
      GOOS: ${{ matrix.goos }}
      CC: ${{ matrix.cc }}
    steps:
      - name: 'Cleanup build folder'
        run: |
          sudo rm -rf ./* || true
          sudo rm -rf ./.??* || true
          ls -la ./
      - run: |
          sudo apt update && \
          sudo apt-get install -y \
          ca-certificates git gcc zip
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.19.12'
      - run: cp go.work.default go.work
      - run: go run -tags="dev" ./core/cmd/create-devkit/main.go
      - run: tree ./output/devkit
      - run: sudo mkdir -p /var/tmp/gh-output && cp -r output/devkit/. /var/tmp/gh-output

  build-arm:
    runs-on: self-hosted-x64
    name: Build on ${{ matrix.arch }}
    strategy:
      matrix:
        include:
          - arch: aarch64
            distro: ubuntu22.04
    steps:
      - name: 'Cleanup build folder'
        run: |
          sudo rm -rf ./* || true
          sudo rm -rf ./.??* || true
          ls -la ./
      - run: |
          sudo apt update && \
          sudo apt-get install -y curl ca-certificates git openssl \
            gcc-aarch64-linux-gnu binutils-aarch64-linux-gnu
      - uses: actions/checkout@v4
      - run: cp go.work.default go.work
      - uses: actions/setup-go@v5
        with:
          go-version: '1.19.12'
      - run: GOOS=linux GOARCH=arm64 CC=aarch64-linux-gnu-gcc go build -tags="dev" -o ./flare ./core/build/devkit/cli/flare.go
      - run: GOOS=linux GOARCH=arm64 CC=aarch64-linux-gnu-gcc go build -tags="dev" -o ./create-devkit ./core/cmd/create-devkit/main.go
      - uses: uraimo/run-on-arch-action@v2.3.0
        with:
          arch: ${{ matrix.arch }}
          distro: ${{ matrix.distro }}
          dockerRunArgs: |
            --volume "${PWD}:/build"
          env: | # YAML, but pipe character is necessary
            CGO_ENABLED: '1'
            GO_CUSTOM_PATH: /build/go
            GITHUB_TOKEN: ${{ secrets.DEVKIT_RELEASE_SECRET }}
          install: |
            apt-get update -q -y && \
              apt-get install -q -y \
              gcc ca-certificates zip git
          run: |
            cd /build && \
              ./flare install-go ./go && \
              ./create-devkit
      - run: tree ./output/devkit
      - run: sudo mkdir -p /var/tmp/gh-output && cp -r ./output/devkit/. /var/tmp/gh-output

  push-sdk:
    runs-on: self-hosted-x64
    needs: [build-amd64, build-arm]
    steps:
      - name: 'Clean up build directory'
        run: |
          sudo rm -rf ./* || true
          sudo rm -rf ./.??* || true
          ls -la ./
      - run: |
          sudo apt update && \
          sudo apt-get install -y curl ca-certificates git
      - uses: actions/checkout@v4
      - run: git clone https://oauth2:${{ secrets.DEVKIT_RELEASE_SECRET }}@github.com/flarehotspot/sdk.git sdk-src
      - run: cp -r sdk outdir
      - run: cp -r sdk-src/.git outdir/.git
      - run: |
          cd outdir && \
            git config --global user.name "Flarego Self-Hosted" && \
            git config --global user.email "business@flarego.ph" && \
            git add . && \
            git commit -am "Automated release script" --allow-empty && \
            git push -u origin main

  publish-release:
    runs-on: self-hosted-x64
    needs: ['push-sdk']
    steps:
      - name: 'Cleanup build folder'
        run: |
          sudo rm -rf ./* || true
          sudo rm -rf ./.??* || true
          ls -la ./
      - uses: actions/checkout@v4
      - run: rm -rf ./output/devkit; mkdir -p ./output && cp -r /var/tmp/gh-output ./output/devkit && rm -rf /var/tmp/gh-output
      - run: tree ./output
      - uses: actions/setup-node@v3
        with:
          node-version: '20'
      - run: npm install
      - run: node ./core/build/devkit/scripts/release-devkit.js
